/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * calculates minimum, average, maximum, change and total value of a series
 *
 * @param rate update rate in seconds
 * @param decimals in result
 */
Math.Series = func(rate, decimals) {

    var lastGetTime, minValue, maxValue, avgValue, totalValue, numValues;

    var result = {
        min     : 0.0,
        avg     : 0.0,
        max     : 0.0,
        diff    : 0.0,
        total   : 0.0,
        num     : 0.0
    };

    rate = (rate !== undefined ? rate : 1);
    decimals = (decimals !== undefined ? decimals : 2);

    var reset = func(now) {

        lastGetTime = now;
        minValue = +Infinity;
        maxValue = -Infinity;
        avgValue = 0;
        totalValue = 0;
        numValues = 0;
    };

    this.lastValue = 0;

    this.set = func(value) {

        minValue = (value < minValue ? value : minValue);
        maxValue = (value > maxValue ? value : maxValue);
        totalValue += value;

        if (numValues === 0) {
            avgValue = value;
        } else {
            avgValue = (numValues * avgValue + value) / (numValues + 1);
        }

        this.lastValue = value;

        numValues++;
    };

    this.get = func() {

        var now = Date.now();
        var delta = (now - lastGetTime) / 1000;

        if (delta > rate) {
            result = {
                min     : minValue.toFixed(decimals),
                avg     : avgValue.toFixed(decimals),
                max     : maxValue.toFixed(decimals),
                diff    : (maxValue - minValue).toFixed(decimals),
                total   : totalValue.toFixed(decimals),
                num     : numValues,
                delta   : delta
            };
            reset(now);
        }

        return result;
    };

    reset(Date.now());
};