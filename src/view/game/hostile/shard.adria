/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Hostile = require('game/hostile');
var RendererGlow = require('renderer/glow');
var geometry = require('geometry');
var ip = require('interpolation');
var deg2rad = geometry.deg2rad;

/**
 * Shard, used as a piece of a previously exploded entity
 *
 * moves away in a random direction (but preferring right) from given origin
 * gains bounding box only after boundingDelay seconds
 * defaults to chaos faction
 */
module Shard = proto (Hostile) {

    public BaseRenderer: RendererGlow,
    public baseSprites: [ 'sprite/asteroid/type1_64x64x60.png',  'sprite/asteroid/type2_64x64x60.png',  'sprite/asteroid/type3_64x64x60.png' ],

    public hitpoints: 8,
    public scale: 1.0,

    public faction: 'chaos',
    public collisionFactions: [ 'hostile', 'neutral', 'friendly' ],

    /**
     * delay after spawn before bounding is activated
     */
    public boundingDelay: 0.15,

    /**
     * general movement angle, deviation and velocity and chance for the shard to go in the opposite direction (0-1)
     */
    public trajectory: 0.0,
    public fanning: 40.0,
    public velocity: 200,
    public backfire: 0.1,

    /**
     * final trajectory
     */
    public deltaX: 0.0,
    public deltaY: 0.0,

    public constructor: func(finite startX, finite startY, finite scale = this.scale) {

        Hostile->constructor(startX, startY);

        this.scale = scale;
        this.hitpoints *= scale;

        this.baseRenderer.scaleX = scale;
        this.baseRenderer.scaleY = scale;
        this.baseRenderer.glowScale = scale;

        this.deathRenderer.scaleX = scale * 3;
        this.deathRenderer.scaleY = scale * 3;
        this.deathRenderer.glowScale = scale * 4;

        this.initTrajectory();
    },

    public collision: func(other) {

        var damage = Math.max(0, this.hitpoints) * (other.faction !== 'friendly' ? 5 : 1);
        other.damage(damage, this);
    },

    public think: func(finite delta) {

        if (Hostile->think(delta) !== true || this.isDead) {
            return false;
        }

        this.updatePosition(delta);
        this.updateGlow(delta);

        // only become collidable after a few moments to prevent instant collision with remaining player projectiles

        if (this.colliderId === 0 && this.age >= this.boundingDelay) {
            this.addBounds(25 * this.scale, 25 * this.scale);
        }

        return true;
    },

    protected initTrajectory: func() {

        var rad = deg2rad * (this.trajectory + Math.rand(-this.fanning, this.fanning));
        this.deltaX = Math.cos(rad) * this.velocity * (1 / this.scale);
        this.deltaY = Math.sin(rad) * this.velocity * (1 / this.scale);
    },

    protected updatePosition: func(finite delta) {

        this.x += this.deltaX * delta;
        this.y += this.deltaY * delta;
    },

    protected updateGlow: func(finite delta) {

        var dsq, age = this.age * 2;
        dsq = ip.peak(age, 1, 2.5);
        dsq *= dsq;

        this.baseRenderer.angle += delta * 2;
        this.baseRenderer.glowAlpha = Math.min(0.8, dsq + age / 2.5);
        this.baseRenderer.glowScale = this.scale * 1.5 * dsq;
    }
};
