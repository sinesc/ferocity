/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Level = require('level');
var Font = require('radiant/font');
var Color = require('radiant/color');
var Series = require('series');

var Asteroid = require('game/hostile/asteroid');
var Player = require('game/player');

//!TODO particle testing

var Particles = require('radiant/renderer/particles');
var Emitter = require('radiant/emitter');
var TextureRamp = require('radiant/texture/ramp');
var TextureFile = require('radiant/texture/file');

module GameLevel = proto (Level) {

    protected factionNames: [ 'friendly', 'neutral', 'hostile', 'chaos' ],
    protected x: 0.0,
    protected y: 0.0,

    protected stats: null,

    /**
     * constructor
     *
     * @param Level? previous optional previous level from which to copy existing entities/factions
     */
    public constructor: func(Level? previous = null) {

        parent->constructor(previous);

        this.font = new Font(application.radiant, '14px Tahoma');

        var delta = 2;

        this.stats = {
            delta: new Series(delta),
            fps: new Series(delta),
            main: new Series(delta),
            collider: new Series(delta),
            tests: new Series(delta),
        };

    },

    public populate: func() {

        for (var i = 0; i < 5000; i++) {
            this.addEntity(Asteroid, [ 600 + Math.randInt(0, 5000), 25 + Math.randInt(0, 1030), Math.rand(0.1, 0.9) ]);
        }

        this.player = this.addEntity(Player, [ 200, 32 ]);
        this.player.addBounds(20, 20);

//!TODO particle testing

this.particles = null;

var texture = new TextureFile(application.radiant, 'sprite/glow/sparkles_64x64x1.png');

texture.once('load', this, func() {

    this.particles = new Particles(application.radiant);

    var blendMode = application.radiant.BLENDMODE.LIGHTEN;
    var ramp = new TextureRamp(application.radiant, [ Color.WHITE, Color.ORANGE, Color.rgba(255,255,255,0) ]);
    var emitter = new Emitter(this.particles, texture, ramp);

    emitter.createParticles(80, {
        startTime: [ application.frameTime + 2.0, application.frameTime + 2.2 ],
        timeToLive: [ 0.05, 0.5 ],
        startSize: 16.0,
        endSize: 128.0,
        originX: 650.0,
        originY: 350.0,
        velocity: 400.0,
        acceleration: 0.0,
        angle: [ 0.0, 2 * Math.PI ],
        rotation: [ 0.0, 2 * Math.PI ],
        color: [ Color.WHITE, /*Color.rgba(255, 200, 200, 255), Color.rgba(255, 220, 210, 180) */ ],
    });

    this.particles.add(blendMode, emitter, 0, 0);
    this.particles.texture = emitter.texture;
    this.particles.ramp = emitter.ramp;
});

//!TODO end particle testing

    },

    public frame: func() {

        this.x += application.frameDelta * 50;

        if (application.buttonState[0]) {
            this.player.fireWeapon();
        }

        Level->frame();

        application.radiant.clear();
        application.scene.draw();

//!TODO particle testing

if (this.particles !== null) {
    this.particles.shader.uNow.value = application.frameTime;
    this.particles.draw();
}
        // debug output

        var scene = application.scene;

        if (this.font.ready) {

            var state       = application.processState;
            var text        = application.scene.text;
            var bm          = application.radiant.BLENDMODE.COPY;
            var tests       = this.stats.tests.set(application.collider.tests, 0);
            var fps         = this.stats.fps.set(1 / application.frameDelta, 1);
            var delta       = this.stats.delta.set(application.frameDelta * 1000, 1);
            var main        = this.stats.main.set((state.mainUsage + state.mainColliderUsage) * 1000, 1);
            var collider    = this.stats.collider.set(state.colliderUsage * 1000, 1);

            var rawCollider = this.stats.collider.get();
            var rawMain = this.stats.main.get();
            var colorCollider = rawCollider.max > rawMain.max && rawCollider.max > 13 ? Color.RED : (rawCollider.max > 12 ? Color.ORANGE : Color.GREEN);
            var colorMain = rawMain.max > rawCollider.max && rawMain.max > 13 ? Color.RED : (rawMain.max > 12 ? Color.ORANGE : Color.GREEN);

            text.write(bm, this.font, 'dims\t\t\t: ' + application.virtualWidth + 'x' + application.virtualHeight, 20, 20, Color.GREEN, 0);
            text.write(bm, this.font, 'gl-draws\t\t: ' + scene.sprites.debugDrawCount, 20, 40, Color.GREEN, 0);
            text.write(bm, this.font, 'sprites\t\t: ' + scene.debugDrawCount, 20, 60, Color.GREEN, 0);
            text.write(bm, this.font, 'entities\t\t: ' + this.entities.length, 20, 80, Color.GREEN, 0);
            text.write(bm, this.font, 'c.tests\t\t:\t$0\t< $1\t< $2'.format(tests.min, tests.avg, tests.max), 20, 100, Color.GREEN, 0);
            text.write(bm, this.font, 'FPS\t\t\t:\t$0\t> $1 \t> $2'.format(fps.max, fps.avg, fps.min), 20, 120, fps.avg >= 59 ? Color.GREEN : Color.ORANGE, 0);
            text.write(bm, this.font, 'delta frame\t:\t$0\t< $1\t< $2 ms'.format(delta.min, delta.avg, delta.max), 20, 140, Color.GREEN, 0);
            text.write(bm, this.font, '\tmain\t\t:\t$0\t< $1\t< $2 ms'.format(main.min, main.avg, main.max), 20, 160, colorMain, 0);
            text.write(bm, this.font, '\tcollider\t:\t$0\t< $1\t< $2 ms'.format(collider.min, collider.avg, collider.max), 20, 180, colorCollider, 0);
            text.write(bm, this.font, 'player-hp\t\t: ' + this.player.hitpoints.toFixed(2), 20, 200, Color.GREEN, 0);
            text.draw();
        }

        scene.sprites.debugDrawCount = 0;
        scene.debugDrawCount = 0;
    }
};
