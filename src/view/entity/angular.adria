/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var geometry = require('geometry');
var deg2rad = geometry.deg2rad;

module Angular = proto {

    /**
     * adjusts the entities angle by up to maxDelta degrees towards the given target
     *
     * @param Entity other entity to seek
     * @param finite maxDelta maximum angular adjustment per call
     * @param finite offsetAngle angle to add to result
     */
    public seek: func(object other, finite maxDelta = 1, finite offsetAngle = 0) {

        // get angle towards player and normalize to 0-360

        var angleToTarget = geometry.angleBetween(other.x, other.y, this.x, this.y);

        if (angleToTarget < 0) {
            angleToTarget = 360 + angleToTarget;
        }

        angleToTarget += offsetAngle;

        // don't do a full 360 if the difference flips from 0 to 360

        var baseAngle = this.angle % 360;

        if (Math.abs(baseAngle - angleToTarget) >= 180) {

            if (angleToTarget > baseAngle) {
                angleToTarget -= 360;
            } else {
                angleToTarget += 360;
            }
        }

        // seek

        if (baseAngle < angleToTarget) {
            this.angle += maxDelta;
        } else {
            this.angle -= maxDelta;
        }
    },

    /**
     * moves the entity using polar coordinates
     *
     * @param finite angle
     * @param finite distance
     */
    public move: func(finite angle, finite distance) {

        var rad = angle * deg2rad;
        this.x += Math.cos(rad) * distance;
        this.y += Math.sin(rad) * distance;

        return this;
    },

    /**
     * positions the entity using polar coordinates
     *
     * @param finite x offset base x
     * @param finite y offset base y
     * @param finite angle
     * @param finite distance from given coordinates
     */
    public offset: func(finite x, finite y, finite angle, finite distance) {

        var rad = angle * deg2rad;
        this.x = x + Math.cos(rad) * distance;
        this.y = y + Math.sin(rad) * distance;

        return this;
    },

};
