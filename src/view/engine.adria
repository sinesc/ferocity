/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Radiant = require('radiant/radiant');
var Keyboard = require('web/keyboard');
var MouseButton = require('web/mouse_button');
var Fullscreen = require('web/fullscreen');
var PointerLock = require('web/pointer_lock');
var Cookie = require('web/cookie');
var Component = require('component');
var Listenable = require('astd/listenable');
var Timeframe = require('timeframe');
var BufferExchange = require('outsourced/buffer_exchange');
var Collider = require('collider');

/**
 * ferocity base engine
 */
module Engine = proto (Component) {

    /**
     * helper instances
     */
    public cookie: null,
    public keyboard: null,
    public mouseButton: null,
    public pointerLock: null,
    public fullscreen: null,
    public audio: null,

    /**
     * radiant
     */
    public radiant: null,
    public scene: null,

    /**
     * collider worker interface
     */
    protected bexCollider: null,
    public collider: null,

    /**
     * active becomes true on start, ready once the worker buffers are set up
     */
    protected active: false,
    protected ready: false,

    /**
     * virtual viewport size
     */
    protected virtualWidth: 1680,
    protected virtualHeight: 1050,

    /**
     * actual viewport
     */
    protected viewportWidth: 1024,
    protected viewportHeight: 576,
    protected viewportStretch: false,
    protected viewportFullscreen: false,
    protected viewportSmoothing: true,

    /**
     * screen
     */
    protected screenWidth: 0,
    protected screenHeight: 0,

    /**
     * ready state: number of events required to occur before being ready to render
     */
    protected FRAME_READY: 2,
    protected processState: null,

    /**
     * frame timing
     */
    public frameTime: 0,
    public frameDelta: 0,
    public frameId: 0,

    public sprites: null,

    /**
     * engine constructor
     *
     * @param object host,
     * @param string colliderURL
     */
    public constructor: func(object host, string colliderURL) {

        // radiant

        this.radiant = new Radiant(this.viewportWidth, this.viewportHeight);
        host.appendChild(this.radiant.canvas);
        this.scene = new Radiant.Scene(this.radiant, 10000);

        // various io

        this.cookie = new Cookie();
        this.keyboard = new Keyboard(host);
        this.mouseButton = new MouseButton(host);
        //this.audio = new Audio();

        this.sprites = { };

        // set up batch rpc to collider

        this.bexCollider = new BufferExchange(new Worker(colliderURL), 1);
        this.bexCollider.on('data', this, this.colliderMessage);
        this.collider = new Collider();

        // set up fullscreen/pointerlock and watch for fullscreen changes

        this.fullscreen = new Fullscreen();
        this.pointerLock = new PointerLock();

        this.fullscreen.on('fullscreen', this, func(active) {
            if (active) {
                this.pointerLock.request(this.radiant.canvas);
            }
        });
    },

    /**
     * load given sprite
     *
     * @param string name
     * @param array params
     * @param object context
     * @param function callback invoked once sprite is ready
     * @return sprite object
     */
    public loadSprite: func(string name, [ [ [ params = [] ], context = this ], callback = null ]) {

        // check if sprite is loaded

        if (typeof this.sprites[name] !== 'undefined') {

            if (callback !== null) {
                setTimeout(func() { callback.apply(context, params); }, 0);
            }

            return this.sprites[name];
        }

        // not yet loaded

        var sprite = new Radiant.Sprite(this.radiant, name);
        this.sprites[name] = sprite;

        if (callback !== null) {
            sprite.once('load', params, context, callback);
        }

        return sprite;
    },

    /**
     * engine destructor
     */
    public destroy: func() {

        this.mouseButton.destroy();
        this.keyboard.destroy();
        this.pointerLock.destroy();
        this.fullscreen.destroy();
        //host.removeChild(canvas);
        this.collider.destroy();
        this.bexCollider.destroy();
    },

    /**
     * starts the engine
     */
    public start: func() {

        if (this.active === true) {
            throw new Exception('Engine already running');
        }

        this.active = true;
        this.frameTime = 0;
        this.frameId = 0;

        //this.timeframeStart();

        // wrap a state for engine frame

        var that = this;
        var now = this.now;

        this.processState = {
            time                : now,
            lastTime            : now - 0.01,   // avoid zero-delta on first frame
            mainUsage           : 0.0,
            mainColliderUsage   : 0.0,
            colliderUsage       : 0.0,
            ready               : this.FRAME_READY -1,
            tryFrame            : func() { that.tryFrame(); }
        };

        this.tryFrame();
    },

    /**
     * surprisingly, this stops the engine render and logic loops
     */
    public stop: func() {
        this.active = false;
        this.ready = false;
    },

    /**
     * try to start new frame, triggers on the last required event
     */
    protected tryFrame: func() {

        this.processState.ready++;

        if (this.processState.ready === this.FRAME_READY) {
            this.processState.ready = 0;
            this.engineFrame();
        }
    },

    /**
     * single engine frame, runs main loop callback
     */
    protected engineFrame: func() {

        if (this.active !== true) {
            return;
        }

        // calculate frame

        var state = this.processState;
        state.time = this.now;
        this.frameId++;
        this.frameTime = state.time;
        this.frameDelta = state.time - state.lastTime;
        assert(this.frameDelta > 0);

        // check for updated viewport dimensions

        this.monitorEnvironment();

        // set up worker communication

        var wbCollider = this.bexCollider.getWriteBuffer();
        this.collider.writeBuffer(wbCollider.data);

        // trigger first time ready code

        if (this.ready === false) {
            this.ready = true;
            this.started();
        }

        // the main loop handler

        this.mainLoop();

        // release worker communication buffers (send them asap)

        wbCollider.release();

        // next frame

        state.mainUsage = this.now - state.time;
        state.colliderUsage = this.collider.usage;
        state.lastTime = state.time;

        window.requestAnimationFrame(state.tryFrame); //!todo temp
        //setTimeout(state.tryFrame, 16);
    },

    /**
     * run collider response buffer
     *
     * @param Buffer readBuffer
     * @param integer sourceId
     */
    protected colliderMessage: func(object readBuffer, sourceId) {

        var start = this.now;

        this.collider.readBuffer(readBuffer.data);
        readBuffer.release();

        this.processState.mainColliderUsage = this.now - start;
        this.tryFrame();
    },

    /**
     * game animation loop contents
     */
    protected mainLoop: func() { },

    /**
     * engine started and ready
     */
    protected started: func() { },

    /**
     * check environment for changes
     */
    protected monitorEnvironment: func() {

        // check for updated screen dimensions

        if (screen.width !== this.screenWidth || screen.height !== this.screenHeight) {

            this.screenWidth = screen.width;
            this.screenHeight = screen.height;
        }

        // determine best size

        var innerHeight = window.innerHeight;
        var innerWidth = window.innerWidth;
        var style = this.radiant.canvas.style;

        if (this.viewportStretch || this.viewportWidth > innerWidth || this.viewportHeight > innerHeight) {

            var width = innerWidth;
            var ratio = this.viewportWidth / this.viewportHeight;

            if (width / ratio > innerHeight) {
                width = Math.floor(innerHeight * ratio);
            }

            var height = Math.floor(width / ratio) + 'px';
            width += 'px';

            if (style.width !== width) {
                style.width = width;
            }

            if (style.height !== height) {
                style.height = height;
            }

        } else {

            if (style.width !== '') {
                style.width = '';
            }

            if (style.height !== '') {
                style.height = '';
            }
        }
    },
};

Engine.mixin(Listenable);
Engine.mixin(Timeframe);
