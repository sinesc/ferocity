/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Component = require('component');
var uniqueId = 0;

module Entity = proto (Component) {

    protected x: 0,
    protected y: 0,
    protected angle: 0,

    protected faction: 'hostile',
    protected collisionFactions: [ 'friendly', 'chaos' ],
    protected colliderId: 0,

    protected testCollision: true,
    private previousTestCollision: true,

    protected hitpoints: 100,
    protected timeOfDeath: -1.0,

    public destructor: func() {

        Component->destructor();

        if (this.colliderId > 0) {
            application.collider.removeCollidable(this.colliderId);
            application.collider.unregisterEntity(this.colliderId);
        }
    },

    public isDead: prop {
        get: func() {
            return (this.timeOfDeath !== -1 || this.disposable);
        },
        set: func(x) {
            throw new Exception('Cannot set isDead');
        }
    },

    public isAlive: prop {
        get: func() {
            return (this.timeOfDeath === -1);
        },
        set: func(x) {
            throw new Exception('Cannot set isAlive');
        }
    },

    /**
     * creates or adds a bounding ellipse to the entity
     *
     * @param finite eh ellipse horizontal size
     * @param finite eV ellipse vertical size
     * @param finite eAngle ellipse rotation angle
     * @param finite eOffsetDistance offset distance from origin
     * @param finite eOffsetAngle offset rotation angle
     * @param finite eOcclusion occlusion factor for background objects
     */
    public addBounds: func(finite eH, finite eV, finite eAngle = 0.0, finite eOffsetDistance = 0.0, finite eOffsetAngle = 0.0, finite eOcclusion = 1.0) {

        var collider = application.collider;
        var factions = application.level.factions;

        if (this.colliderId === 0) {

            this.colliderId = uniqueId++;

            collider.addCollidable(this.colliderId, this.x, this.y, this.angle, factions.getByName(this.faction));
            collider.registerEntity(this.colliderId, this);

            for (var i = 0, len = this.collisionFactions.length; i < len; i++) {
                collider.addCollisionFaction(this.colliderId, factions.getByName(this.collisionFactions[i]));
            }
        }

        collider.addBounds(this.colliderId, eH, eV, eAngle, eOffsetDistance, eOffsetAngle, eOcclusion);
    },

    /**
     * update position for collision testing purposes
     */
    public updateCollider: func() {

        if (this.colliderId > 0 && (this.testCollision === true || this.previousTestCollision !== this.testCollision)) {
            application.collider.updateCollidable(this.colliderId, this.x, this.y, this.angle, this.testCollision ? 0 : 1);
            this.previousTestCollision = this.testCollision;
        }
    },

    /**
     * death handler, override for functionality
     *
     * @param timeOfDeath
     * @param other causing entity
     * @param bound own bound that got hit
     */
    public death: func() { },

    /**
     * think handler, override for functionality
     *
     */
    public think: func(finite delta) {

        if (this.disposable) {
            return false;
        }

        this.runTimedEvents();
        return true;
    },

    /**
     * draw handler, override for functionality
     */
    public draw: func() {
        return this.disposable === false;
    },

    /**
     * kills this entity if not already dead (records time of death, calls death function)
     *
     * @param other causing entity
     * @param bound own bound that got hit
     */
    public die: func(Entity other, bound) {

        if (this.isDead) {
            return;
        }

        this.hitpoints = 0;
        this.timeOfDeath = application.frameTime;
        this.death(this.timeOfDeath, other, bound);
    },

    /**
     * called when colliding with another entity
     *
     * @param Entity other
     */
    public collision: func(Entity other) {
        other.damage(this.hitpoints, this, null /*todo*/);
    },

    /**
     * causes damage to this entity, killing it when it drops to or below 0 hitpoints
     *
     * @param other entity doing the damage
     * @param bound own bound that got hit
     */
    public damage: func(finite value, Entity other, bound) {

        this.hitpoints -= Math.min(this.hitpoints, value);

        if (this.hitpoints <= 0 && this.isAlive) {
            this.die(other, bound);
        }
    },

};
