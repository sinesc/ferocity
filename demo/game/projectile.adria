/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var RendererGlow = require('./renderer/glow');
var RendererScratch = require('./renderer/scratch');
var Configurable = require('./configurable');
var EntityAngular = require('ferocity/view/entity/angular');
var emitterScratch = require('./emitter/scratch');

/**
 * Projectile
 *
 * baseclass for shot type entities
 */
module Projectile = proto (Configurable) mixin (EntityAngular) {

    public BaseRenderer: RendererGlow,
    public baseSprites: [ 'sprite/projectile/bolt_blue_60x36x1.jpg' ],

    public DeathRenderer: proto (RendererScratch) {
        glowScale: 0.5,
        expEmitter: emitterScratch,
        expMaxRadius: 20.0,
        expMinEffects: 0,
        expMaxEffects: 1
    },

    public deathSprites: [ 'sprite/explosion/default_128x128x40.jpg' ],
    public deathSounds: null,

    public hitpoints: 10.0,
    public timeToLive: 5,
    public allowOffscreen: false,
    public fadeDuration: 0.5,
    public velocity: 1000.0,

    protected spawnX: 0.0,
    protected spawnY: 0.0,

    public constructor: func(finite relativeSpawnX, finite relativeSpawnY, finite angle = 0, finite damage = this.hitpoints, boolean forceSilence = false, finite velocityModifier = 1) {

        Configurable->constructor(relativeSpawnX, relativeSpawnY);

        this.spawnX = relativeSpawnX + application.level.x;
        this.spawnY = relativeSpawnY + application.level.y;
        this.velocity *= velocityModifier;
        this.hitpoints = damage;
        this.angle = angle;
        this.baseRenderer.angle = this.angle;

        if (forceSilence !== true) {
            //this.playSound('sound/laser_hum.ogg');   //!todo fix both
        }
    },

    public think: func(finite delta) {

        if (Configurable->think(delta) !== true || this.isDead) {
            return false;
        }

        this.updatePosition();

        this.baseRenderer.angle = this.angle;

//!todo
        if (this.allowOffscreen === false && this.isOffscreen || this.age > this.timeToLive) {
            this.destroy();
        }

        if (this.age > this.timeToLive - this.fadeDuration) {
            this.baseRenderer.fade(this.fadeDuration);
        }

        return true;
    },

    protected initBounds: func() {
        this.addBounds(5, 5);
    },

    protected updatePosition: func() {
        this.offset(this.spawnX, this.spawnY, this.angle, this.age * this.velocity);
    },
};
