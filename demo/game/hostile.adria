/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Configurable = require('./configurable');
var Weapon = require('./weapon');

/**
 * Hostile
 *
 * baseclass for enemy type entities
 */
module Hostile = proto (Configurable) {

    public Weapon              : Weapon,
    public shotInitialDelay    : 1.5,
    public primary             : null,
    public secondary           : null,
    public shield              : null,
    public dropDefines         : null,
    public drops               : null,
    public weaponScaling       : 20,
    public allowOffscreen      : false,

    public constructor: func(finite startX, finite startY) {

        Configurable->constructor(startX, startY);

        this.setWeapon(new this.Weapon(this));
        this.baseRenderer.angle = this.angle;
    },

    public destructor: func() {

        this.primary.destroy();
        Configurable->destructor();
    },

    public setWeapon: func(weapon) {

        var slotName = (weapon.slot == weapon.SLOT_PRIMARY ? 'primary' : (weapon.slot == weapon.SLOT_SECONDARY ? 'secondary' : 'shield'));

        // remove previous weapon in slot and add new one

        if (this[slotName] != null) {
            this[slotName].destroy();
        }

        this[slotName] = weapon;

        // evening the scales

        if (weapon.enemyScaling == weapon.ES_COOLDOWN || weapon.enemyScaling == weapon.ES_BOTH) {
            weapon.cooldown *= this.weaponScaling;
        }

        if (weapon.enemyScaling == weapon.ES_INTERVAL || weapon.enemyScaling == weapon.ES_BOTH) {
            weapon.interval *= this.weaponScaling;
        }
    },

    public death: func() {

        Configurable->death();

        // spawn a random powerup

        if (this.drops != null) {

            var powerup = Math.pick(this.drops);

            if (powerup != null) {
                assert(typeof this.dropDefines[powerup] == 'function');
                this.spawnUnowned(this.dropDefines[powerup], [this.x, this.y]);
            }
        }
    },

    public think: func(finite delta) {

        if (Configurable->think(delta) != true) {
            return false;
        }

        this.fireWeapon(delta);

        return true;
    },

    /**
     * returns the firing parameters for the primary weapon
     */
    protected getPrimaryParams: func() {
        return [ 180, 0 ];
    },

    protected fireWeapon: func(delta) {

        if (this.isAlive && this.primary.isReady && this.age > this.shotInitialDelay && application.level.player.isAlive) {

            var weaponParams = this.getPrimaryParams();

            if (weaponParams != null) {
                this.primary.fire.apply(this.primary, weaponParams);
            }
        }
    },
};
