/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Configurable = require('./configurable');
var Weapon = require('./weapon/basic');
var RendererExhaust = require('./renderer/exhaust');

/**
 * Configurable
 *
 * fairly configurable baseclass for shots and enemies
 */
module Player = proto (Configurable) {

    protected faction: 'friendly',
    protected collisionFactions: [ 'hostile', 'chaos' ],
    protected spawnFaction: Player::faction,
    protected spawnCollisionFactions: Player::collisionFactions,

    protected BaseRenderer: RendererExhaust,
    protected baseSprites: [ 'sprite/player/speedy_98x72x30.png' ],

    public Weapon              : proto (Weapon) { interval: 0.2, damage: 80 },
    public primary             : null,
    public secondary           : null,
    public shield              : null,

    public constructor: func(finite relativeSpawnX = 0, finite relativeSpawnY = 0) {

        Configurable->constructor(relativeSpawnX, relativeSpawnY);
        this.setWeapon(new this.Weapon(this));
    },

    public setWeapon: func(weapon) {

        var slotName = (weapon.slot === weapon.SLOT_PRIMARY ? 'primary' : (weapon.slot === weapon.SLOT_SECONDARY ? 'secondary' : 'shield'));

        // remove previous weapon in slot and add new one

        if (this[slotName] !== null) {
            this[slotName].destroy();
        }

        this[slotName] = weapon;
    },

    public think: func(finite delta) {

        Configurable->think(delta);

        this.measure();
        this.motionFrame(this.baseRenderer);

        if (application.buttonState[0]) {
            this.fireWeapon();
        }
    },

    protected fireWeapon: func(delta) {

        if (this.isAlive && this.primary.isReady) {
            this.primary.fire(0, 20);
        }
    },

};
