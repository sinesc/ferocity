/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Color = require('radiant/color');
var deg2rad = require('ferocity/shared/geometry').deg2rad;
var Glow = require('./glow');

module Exhaust = proto (Glow) {

    public composite: 'COPY',

    public glowColor: Color.alpha1(0.5),
    public glowScale: 0.5,

    public exhaustSpriteName: 'sprite/exhaust/default_128x64x8.jpg',
    public exhaustSprite: null,
    public exhaustFPS: 30.0,
    public exhaustLayer: 2,
    public exhaustComposite: 'LIGHTEN',
    public exhaustColor: Color.WHITE,
    public exhaustScale: 1.0,
    public exhaustIntensity: 1.0,
    public exhaustOffset: 10.0,
    public exhaustOffsetAngle: 0.0,

    public constructor: func(string spriteName = this.spriteName, string glowSpriteName = this.glowSpriteName, string exhaustSpriteName = this.exhaustSpriteName) {

        Glow->constructor(spriteName, glowSpriteName);

        this.exhaustSpriteName = exhaustSpriteName;
        this.exhaustSprite = application.sprites.load(this.exhaustSpriteName);
        assert(this.exhaustSprite !== null);
    },

    public draw: func(x, y) {

        if (this.active !== true || this.sprite.frames === null || this.glowSprite.frames === null || this.exhaustSprite.frames === null) {
            return;
        }

        // exhaust

        var frameId = Math.round(application.frameTime * this.exhaustFPS) % this.exhaustSprite.numFrames;
        var exhaustAlpha = this.exhaustIntensity * Math.rand(0.5, 1.0);
        var exhaustScale = this.exhaustScale * this.exhaustIntensity * 2;
        var exhaustAngle = this.angle + this.exhaustOffsetAngle;
        var rad = exhaustAngle * deg2rad;
        var exhaustOffset = this.exhaustOffset - this.exhaustSprite.width * exhaustScale / 2 - this.sprite.width * this.scaleX / 2;

        if (exhaustAlpha > 0) {

            application.scene.addSprite(
                this.exhaustLayer,
                application.radiant.BLENDMODE[this.exhaustComposite],
                this.exhaustSprite,
                frameId,
                parseInt(x + this.offsetX + Math.cos(rad) * exhaustOffset),
                parseInt(y + this.offsetX + Math.sin(rad) * exhaustOffset),
                Color.setAlpha1(this.exhaustColor, exhaustAlpha),
                rad,
                exhaustScale,
                exhaustScale
            );
        }

        // base sprite

        application.scene.addSprite(
            this.layer,
            application.radiant.BLENDMODE[this.composite],
            this.sprite,
            this.getFrameId(),
            parseInt(x + this.offsetX),
            parseInt(y + this.offsetY),
            this.color,
            this.angle * deg2rad,
            this.scaleX,
            this.scaleY
        );

        // glow

        var glowAlpha = Color.getAlpha(this.glowColor) *  this.exhaustIntensity * Math.rand(0.5, 1.0);
        var glowScale = this.glowScale * this.exhaustIntensity * 2;
        var glowOffset = this.exhaustOffset - this.sprite.width * this.scaleX / 2;

        if (glowAlpha > 0) {

            application.scene.addSprite(
                this.glowLayer,
                application.radiant.BLENDMODE[this.glowComposite],
                this.glowSprite,
                0,
                parseInt(x + this.offsetX + Math.cos(rad) * glowOffset),
                parseInt(y + this.offsetY + Math.sin(rad) * glowOffset),
                Color.setAlpha(this.glowColor, glowAlpha),
                exhaustAngle * deg2rad,
                glowScale,
                glowScale
            );
        }
    },
};


