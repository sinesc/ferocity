/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Random = require('astd/random');
var deg2rad = require('ferocity/shared/geometry').deg2rad;
var ip = require('ferocity/view/interpolation');
var Color = require('radiant/color');
var Glow = require('./glow');
var emitterExplode = require('../emitter/explode');

/**
 * Renders the sprite multiple times moving outward from a common center. The effect will only play
 * once and has to be triggered using start()
 *
 * @param sprite id
 */
module Explode = proto (Glow) {

    public spriteName: 'sprite/explosion/default_128x128x40.jpg',
    public color: Color.alpha1(0.75),

    public glowColor: Color.rgba1(1.0, 0.8, 0.6, 0.6),
    public glowScale: 5,

    public expEmitter: emitterExplode,

    /**
     * time until explosion glow reaches maximum (percent of animation duration)
     */
    public glowGain: 35.0,

    /**
     * time until explosion glow fades back to zero (percent of animation duration)
     */
    public glowDecay: 35.0,

    /**
     * minimum number of explosions
     */
    public expMinEffects: 3,

    /**
     * maximum number of explosions
     */
    public expMaxEffects: 5,

    /**
     * maximum distance from center for explosions to spawn
     */
    public expMaxRadius: 75.0,

    /**
     * interval between animation start for the individual sprites
     */
    public expInterval: 0.15,

    /**
     * restart explosion once done
     */
    public continuous: false,

    /**
     * internal
     */
    protected entropy: null,
    protected active: false,
    protected expT0: 0,
    protected numExplosions: 0,

    /**
     * triggers the explosion effect
     *
     * @return time the effect will take
     */
    public start: func() {

        this.entropy        = new Random(Math.random());
        this.active         = true;
        this.expT0          = application.frameTime;
        this.numExplosions  = this.entropy.intLinearMin(this.expMaxEffects - this.expMinEffects) + this.expMinEffects;

        // return total amount of time required to play through the effect

        return this.continuous ? 99999999.0 : (this.numExplosions * this.expInterval) + (this.sprite.numFrames / this.FPS);
    },

    /**
     * draws the sprite
     *
     * @param x
     * @param y
     */
    public draw: func(finite x, finite y) {

        if (this.active !== true) {
            return;
        }

        var offset, frameId;
        var rendered = 0;
        var maxGlow = 0.0;
        var ent = this.entropy;

        // render explosion sprites

        ent.reset();

        for (var i = 0; i < this.numExplosions; ++i) {

            // calculate frame

            offset = this.expT0 + i * this.expInterval;
            frameId = Math.round((application.frameTime - offset + this.offsetT) * this.FPS);

            // draw all explosions that aren't yet finished

            if (frameId < 0) {

                rendered++;

            } else if (frameId < this.sprite.numFrames) {

                // calculate maximum glow brightness for current frame (of all animation sprites)

                var framePerc = (frameId + 1) / this.sprite.numFrames;

                maxGlow = Math.max(maxGlow, ip.peak(framePerc, this.glowGain / 100, this.glowDecay / 100));

                this.polarOffset(ent.float(0, 360), i === 0 ? 0.0 : ent.float(0, this.expMaxRadius));

                application.scene.addSprite(
                    (i+1) % 2 * 2 + 2,
                    application.radiant.BLENDMODE[this.composite],
                    this.sprite,
                    frameId,
                    (x + this.offsetX) | 0,
                    (y + this.offsetY) | 0,
                    Color.setAlpha1(this.color, (i === 0 ? Math.sqrt(Color.getAlpha1(this.color)) : Color.getAlpha1(this.color))),
                    ent.float(0, 360) * deg2rad,
                    this.scaleX,
                    this.scaleY
                );

                rendered++;
            }
        }

        // render glow at the maximum brightness established for any of the sprites rendered

        var glowAlpha = Color.getAlpha1(this.glowColor);

        if (this.expMaxEffects === 0 || (rendered > 0 && this.glowSprite !== null && glowAlpha > 0.0)) {

            var color = Color.fromTemperature(15000 - (maxGlow * maxGlow * maxGlow * maxGlow * 11500), glowAlpha * maxGlow * 255);

            application.scene.addSprite(
                this.glowLayer,
                application.radiant.BLENDMODE[this.glowComposite],
                this.glowSprite,
                0,
                parseInt(x + this.offsetX),
                parseInt(y + this.offsetY),
                color.value,
                0,
                this.glowScale * maxGlow
            );

        }

        // add particle effect

        var emitter = this.expEmitter.getInstance();

        if (this.scaleX >= 1) {
            ent.reset();
            application.scene.addEmitter(
                application.radiant.BLENDMODE.LIGHTEN,
                emitter,
                application.frameTime - this.expT0,
                parseInt(x),
                parseInt(y)
            );
        }

        // if none were rendered, the animation is done

        if (rendered === 0 && application.frameTime - this.expT0 > emitter.duration) {
            if (this.continuous !== true) {
                this.active = false;
            } else {
                this.expT0 = application.frameTime;
            }
        }
    },
};
