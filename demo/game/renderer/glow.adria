/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var deg2rad = require('ferocity/shared/geometry').deg2rad;
var Renderer = require('ferocity/view/renderer');
var Color = require('radiant/color');

module Glow = proto (Renderer) {

    public layer: 0,
    public composite: 'LIGHTEN',

    public glowSpriteName: 'sprite/glow/basic_256x256x1.png',
    public glowSprite: null,
    public glowLayer: 4,
    public glowComposite: 'LIGHTEN',
    public glowColor: Color.WHITE,
    public glowScale: 1.0,
    public glowAngle: NaN,

    /**
     * constructor
     *
     * @param string spriteName specify to override default (if any)
     * @param string glowSpriteName specify to override default (if any)
     */
    public constructor: func(string spriteName = this.spriteName, string glowSpriteName = this.glowSpriteName) {

        Renderer->constructor(spriteName);

        this.glowSpriteName = glowSpriteName;
        this.glowSprite = application.sprites.load(this.glowSpriteName);
        assert(this.glowSprite != null);
    },

    /**
     * draws the sprite
     *
     * @param finite x
     * @param finite y
     */
    public draw: func(finite x, finite y) {

        assert(this.layer < 10);

        if (this.active != true || this.sprite.frames == null || this.glowSprite.frames == null) {
            return;
        }

        var factor = this.fadeFactor;

        if (Color.getAlpha(this.glowColor) > 0) {

            application.scene.addSprite(
                this.glowLayer,
                application.radiant.BLENDMODE[this.glowComposite],
                this.glowSprite,
                0,
                parseInt(x + this.offsetX),
                parseInt(y + this.offsetY),
                Color.setAlpha(this.glowColor, Color.getAlpha(this.glowColor) * factor * factor * factor),
                isNaN(this.glowAngle) ? this.angle * deg2rad : this.glowAngle * deg2rad,
                this.glowScale,
                this.glowScale
            );
        }

        if (Color.getAlpha(this.color) > 0) {

            application.scene.addSprite(
                this.layer,
                application.radiant.BLENDMODE[this.composite],
                this.sprite,
                this.getFrameId(),
                parseInt(x + this.offsetX),
                parseInt(y + this.offsetY),
                Color.setAlpha(this.color, Color.getAlpha(this.color) * factor * factor),
                this.angle * deg2rad,
                this.scaleX,
                this.scaleY
            );
        }
    },
};
