/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Entity = require('ferocity/view/entity');
var Noisy = require('ferocity/view/entity/noisy');
var Renderer = require('ferocity/view/renderer');
var RendererExplode = require('ferocity/view/renderer/explode');

/**
 * Configurable
 *
 * fairly configurable baseclass for shots and enemies
 */
module Configurable = proto (Entity) mixin (Noisy) {

    public angle: 180.0,

    public visibilityRadius: 50,
    public isVisible: true,

    public BaseRenderer: Renderer,
    public baseSprites: [ 'sprite/asteroid/type1_64x64x60.png' ],
    public baseRenderer: null,

    public DeathRenderer: RendererExplode,
    public deathSprites: [ 'sprite/explosion/default_128x128x40.jpg' ],
    public deathRenderer: null,

    public deathSounds: [ 'sound/explosion1.ogg', 'sound/explosion2.ogg' ],
    public deathSoundSize: 1.0,
    public deathSoundPriority: 0,

    public constructor: func(finite relativeSpawnX = 0, finite relativeSpawnY = 0) {

        Entity->constructor();

        // set up renderers

        this.baseRenderer = new this.BaseRenderer(this.baseSprites.random());

        if (this.DeathRenderer !== null && this.deathSprites !== null) {
            this.deathRenderer = new this.DeathRenderer(this.deathSprites.random());
        }

        // load audio

        if (this.deathSounds !== null) {
            //application.loader.audio(this.deathSounds);
        }

        // initialize starting position

        this.x = application.level.x + relativeSpawnX;
        this.y = application.level.y + relativeSpawnY;
    },

    public think: func(finite delta) {

        if (Entity->think(delta)) {

            if (this.colliderId === 0) {
                this.initBounds();
            }

            return true;

        } else {

            return false;
        }
    },

    public draw: func() {

        if (this.disposable) {
            return false;
        }

        // compute display coordinates, check if entity is visible

        var displayX = parseInt(this.x - application.level.x);
        var displayY = parseInt(this.y - application.level.y);

        this.updateVisibility(displayX, displayY);

        if (this.isVisible !== true) {
            return false;
        }

        // draw entity

        this.baseRenderer.draw(this.x, this.y);

        if (this.deathRenderer !== null) {
            this.deathRenderer.draw(this.x, this.y);
        }

        return true;
    },

    public death: func(time) {

        var duration = 0;

//        this.stopSound();
        this.bounds = null;

        if (this.deathRenderer !== null) {
            duration = this.deathRenderer.start();
        }

        if (this.deathSounds !== null) {
//            var sound = this.deathSounds[Math.randInt(0, this.deathSounds.length -1)];
//            application.audio.playDirectional(sound, this.deathSoundPriority, this.x, this.y, 0, 0, 0.3, 5 / this.deathSoundSize);
        }

        this.in(duration / 8, func() {
            this.baseRenderer.active = false;
        });

        this.in(duration, this.destroy);
    },

    protected initBounds: func() {

    },

    protected updateVisibility: func(finite x, finite y) {

        var maxX = application.virtualWidth | 0;
        var maxY = application.virtualHeight | 0;
        var range = this.visibilityRadius | 0;

        this.isVisible = (x < -range || y < -range || x > maxX + range || y > maxY + range) === false;

        range *= 10;

        this.testCollision = (x < -range || y < -range || x > maxX + range || y > maxY + range) === false;
    },
};
