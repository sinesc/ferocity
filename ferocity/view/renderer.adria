/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var deg2rad = require('../shared/geometry').deg2rad;
var Color = require('radiant/color');

/**
 * Sprite renderer object used to describe how a sprite is being rendered
 */
module Renderer = proto {

    public active       : true,

    public spriteNames  : null,
    public sprite       : null,
    public FPS          : 25,
    public layer        : 3,
    public composite    : 'COPY',
    public color        : Color.WHITE,

    public angle        : 0.0,
    public scaleX       : 1.0,
    public scaleY       : 1.0,
    public offsetX      : 0.0,
    public offsetY      : 0.0,
    public offsetT      : 0.0,
    public origin       : 0, //!todo spirite origin

    /**
     * if >= 0, given frame will be rendered continuously
     */
    public forceFrame   : -1,

    /**
     * unless forceFrame is set, frames will progress in steps of <frameStep>
     */
    public frameStep    : 1,
    public frameOffset  : 0,

    /**
     * fade handling
     */
    protected fadeEnd   : -1,
    protected fadeDuration: -1,

    /**
     * constructor
     *
     * @param string/Array spriteNames specify to override default (if any)
     */
    public constructor: func(spriteNames = this.spriteNames) {

        this.spriteNames = spriteNames;

        var selectedSprite;

        if (typeof this.spriteNames === 'string') {
            selectedSprite = this.spriteNames;
        } else {
            assert(this.spriteNames instanceof Array);
            selectedSprite = this.spriteNames.random();
        }

        this.sprite = application.sprites.load(selectedSprite);
        assert(this.sprite !== null);
    },

    /**
     * returns current fade factor to use in alpha calculations
     */
    public fadeFactor: prop {
        get: func() {
            return (this.fadeEnd === -1 ? 1 : Math.max(0, (this.fadeEnd - application.frameTime) / this.fadeDuration));
        }
    },

    /**
     * start to fade to 0 alpha over duration seconds
     *
     * @param duration fade duration
     */
    public fade: func(duration) {

        if (this.fadeEnd !== -1) {
            return;
        }

        this.fadeEnd = application.frameTime + duration;
        this.fadeDuration = duration;
    },

    /**
     * sets offset x/y using polar coordinates
     *
     * @param angle
     * @param radius
     */
    public polarOffset: func(finite angle, finite radius) {

        var rad = angle * deg2rad;
        this.offsetX = Math.sin(rad) * radius;
        this.offsetY = Math.cos(rad) * radius;
    },

    /**
     * computes frame ID based on application time and offset
     */
    public getFrameId: func() {

        if (this.forceFrame === -1) {

            var numFrames = this.sprite.numFrames;
            var frameId = Math.round((application.frameTime + this.offsetT) * this.FPS) * this.frameStep;
            frameId = (frameId % numFrames) | 0;
            frameId += this.frameOffset; //!todo why didn't I just add id before % op?
            return (frameId % numFrames) | 0;

        } else {

            return Math.round(this.forceFrame);
        }
    },

    /**
     * draws the Sprite
     *
     * @param finite x
     * @param finite y
     */
    public draw: func(finite x, finite y) {

        assert(this.layer < 10);

        if (this.active !== true || this.sprite.frames === null) {
            return;
        }

        var factor = this.fadeFactor;

        application.scene.addSprite(
            this.layer,
            application.radiant.BLENDMODE[this.composite],
            this.sprite,
            this.getFrameId(),
            parseInt(x + this.offsetX),
            parseInt(y + this.offsetY),
            Color.setAlpha(this.color, Color.getAlpha(this.color) * factor * factor),
            this.angle * deg2rad,
            this.scaleX,
            this.scaleY
            // this.origin !todo
        );
    },
};
