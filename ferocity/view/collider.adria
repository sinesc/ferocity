/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var ColliderBase = require('../shared/collider_base');
import Map;

/**
 * MAIN PROCESS endpoint of Collider
 */
module Collider = proto (ColliderBase) {

    protected entityByColliderId: null,
    public usage: 0.0,
    public tests: 0,

    /**
     * instance constructor
     */
    public constructor: func() {

        parent->constructor();
        this.entityByColliderId = new Map();
    },

    /**
     * register entity<->collider association
     *
     * @param finite colliderId
     * @param object entity
     */
    public registerEntity: func(finite colliderId, object entity) {
        this.entityByColliderId.set(colliderId, entity);
    },

    /**
     * unregister entity<->collider association
     *
     * @param finite colliderId
     */
    public unregisterEntity: func(finite colliderId) {
        this.entityByColliderId.delete(colliderId);
    },

    /**
     * called by collider worker to trigger entity collision handler
     *
     * @param finite collidableIdA
     * @param finite collidableIdB
     */
    public collision: func(finite collidableIdA, finite collidableIdB) {

        var entityA = this.entityByColliderId.get(collidableIdA);
        var entityB = this.entityByColliderId.get(collidableIdB);

        if (typeof entityA == 'object' && typeof entityB == 'object') {
            entityA.collision(entityB);
            entityB.collision(entityA);
        }
    },

    public reportUsage: func(finite usage) {
        this.usage = usage;
    },

    public reportTests: func(finite tests) {
        this.tests = tests;
    },


    public log: func(message) {
        console.log(message);
    },
};

Collider::setupEndPoint('view');
