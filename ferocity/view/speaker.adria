/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var Listenable = require('astd/listenable');

var Buffer = proto (Listenable) {
    public constructor: func(file) {
        this.file = file;
    },
    public data: null,
    public status: 'loading',
    public message: '',
    public file: '',
};

module Speaker = proto {

    protected audio: null,
    protected source: null,
    protected buffer: null,
    protected /*static*/ buffers: Object.create(null),

    public constructor: func(object audio, string file) {

        this.audio = audio;
        this.buffer = this.load(file);
    },

    public destroy: func() {

        this.source.stop(0);
        //this.source.disconnect(0);
        this.source = null;
        this.audio = null;
    },

    public play: func() {

        if (this.source !== null && this.source.buffer === null && this.buffer.data !== null) {
            this.source.buffer = this.buffer.data;
        }

        this.source.start(0);
    },

    protected playWhenReady: func() {

        var buffer = this.buffer;

        if (buffer.status === 'loading' || buffer.status === 'decoding') {
            this.buffer.once('ready', this, this.play);
        } else if (buffer.status === 'ready') {
            this.play();
        }
    },

    /**
     * select loop start/end positions or disable looping when start===end
     *
     * @param finite start
     * @param finite end
     */
    public setLoop: func(finite start = 0, finite end = 0) {

        if (start !== end) {
            this.source.loop = true;
            this.source.loopStart = start;
            this.source.loopEnd = end;
        } else {
            this.source.loop = false;
        }
    },

    /**
     * creates a buffer-sources and connects it via given nodes to the master-gain
     *
     * @param buffer
     * @param nodes
     * @return source
     */
    protected createSource: func(buffer, ...nodes) {

        var source = this.audio.ctx.createBufferSource();

        if (buffer !== null) {
            source.buffer = buffer;
        }

        // chain up nodes

        var currentFrom = source;

        if (nodes.length > 0) {

            for (var id = 0, len = nodes.length; id < len; id++) {
                currentFrom.connect(nodes[id]);
                currentFrom = nodes[id];
            }
        }

        currentFrom.connect(this.audio.masterGain);

        return source;
    },

    /**
     * loads a resources asynchonously and returns a buffer listenable
     *
     * @param string src
     */
    protected load: func(string src) {

        // create new buffer descriptor

        if (typeof this.buffers[src] === 'undefined') {

            var buffer = new Buffer(src);
            this.buffers[src] = buffer;

            // load data and decode

            var audio = this.audio;
            var request = new XMLHttpRequest();

            request.open('GET', src, true);
            request.responseType = 'arraybuffer';
            request.onload = func() {
                buffer.status = 'decoding';
                audio.ctx.decodeAudioData(
                    request.response,
                    func(data) {
                        buffer.status = 'ready';
                        buffer.data = data;
                        buffer.execute('ready');
                    },
                    func(e) {
                        buffer.status = 'failed';
                        buffer.message = e.err;
                        buffer.execute('error');
                    }
                );
            };
            request.onerror = func() {
                buffer.status = 'failed';
                buffer.message = 'i/o error';
                buffer.execute('error');
            };

            request.send();
        }

        // return buffer descriptor

        return this.buffers[src];
    },
};
