/*
 * ferocity Sidescroller Engine
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var geometry = require('../shared/geometry');
var ellipsesIntersect = geometry.ellipsesIntersect;
var deg2rad = geometry.deg2rad;
var uniqueId = 0;

/**
 * a single collision ellipse
 */
export Ellipse = proto {

    h               : 1.0,
    v               : 1.0,
    angle           : 0.0,
    offsetDistance  : 0.0,
    offsetAngle     : 0.0,
    offsetX         : 0.0,
    offsetY         : 0.0,
    occlusion       : 0.0,

    /**
     * constructs new ellipse
     *
     * @param h
     * @param v optional, default h
     * @param angle optional, default 0.0
     * @param offsetDistance optional, default 0.0
     * @param offsetAngle optional, default 0.0
     * @param occlusion optional, default 0.0
     */
    constructor: func(finite h, finite v = h, finite angle = 0.0, finite offsetDistance = 0.0, finite offsetAngle = 0.0, finite occlusion = 0.0) {
        this.h              = h;
        this.v              = v;
        this.angle          = angle;
        this.offsetDistance = offsetDistance;
        this.offsetAngle    = offsetAngle;
        this.occlusion      = occlusion;
    },

    /**
     * recalculates absolute offsets
     *
     * @param angle parent bounds-object angle to factor into offsets
     */
    updateOffset: func(finite angle) {

        var rad = (this.offsetAngle + angle) * deg2rad;

        this.offsetX = Math.cos(rad) * this.offsetDistance;
        this.offsetY = Math.sin(rad) * this.offsetDistance;
    },
};

/**
 * ellipse based boundary for collision detection purposes
 */
module Bounds = proto {

    owner       : null,
    id          : 0,
    ellipse     : null,
    outerX1     : 0.0,
    outerY1     : 0.0,
    outerX2     : 0.0,
    outerY2     : 0.0,
    occlusion   : 0.0,

    /**
     * simple bounds are perfect cicles at no offset. they do not need to be rotated
     */
    simple: true,

    /**
     * bounds offset angle against owner
     */
    angle: 0,

    /**
     * angle for current cached values. includes owner angle
     */
    _angle: NaN,

    /**
     * creates a new instance
     *
     * @param owner owning entity
     * @param ellipseH
     * @param ellipseV optional, default ellipseH
     * @param ellipseAngle optional, default 0.0
     * @param ellipseOffsetDistance optional, default 0.0
     * @param ellipseOffsetAngle optional, default 0.0
     * @param ellipseOcclusion optional, default 0.0. determines background light effect occlusion
     */
    constructor: func(owner, finite ellipseH, finite ellipseV = ellipseH, finite ellipseAngle = 0.0, finite ellipseOffsetDistance = 0.0, finite ellipseOffsetAngle = 0.0, finite ellipseOcclusion = 0.0) {

        assert(owner instanceof require('./collidable'));

        this.owner      = owner;
        this.ellipse    = [ new Ellipse(ellipseH, ellipseV, ellipseAngle, ellipseOffsetDistance, ellipseOffsetAngle, ellipseOcclusion) ];
        this.id         = uniqueId++;

        if (ellipseH != ellipseV || ellipseOffsetDistance != 0) {
            this.simple = false;
        }
    },

    /**
     * destroys the owner link so that the garbage collector is not confronted with circular references
     */
    destroy: func() {
        this.owner = null;
    },

    /**
     * returns maximum boundary radius
     */
    radius: prop {
        get: func() {
            this.update();
            return Math.max(-this.outerX1, -this.outerY1, this.outerX2, this.outerY2);
        }
    },

    /**
     * test if this Bounds intersects another
     *
     * @param other other Bounds to test against
     * @returns null for no intersection, array containing ids or intersecting ellipses [ ownId, otherId ]
     */
    intersects: func(other) {

        var tp = this.owner;
        var op = other.owner;

        // update calculated offsets and boundaries if the object has been changed since the last update

        this.update();

        // test bounding box first

        if (this.outerX2 + tp.x < other.outerX1 + op.x || this.outerX1 + tp.x > other.outerX2 + op.x) {
            return null;
        }

        if (this.outerY2 + tp.y < other.outerY1 + op.y || this.outerY1 + tp.y > other.outerY2 + op.y) {
            return null;
        }

        // do exact ellipse hit detection

        var ownId = this.ellipse.length;
        var ellipse, otherId;

        while (ownId--) {

            ellipse = this.ellipse[ownId];
            otherId = this.intersectOneAgainstAny(tp.x + ellipse.offsetX, tp.y + ellipse.offsetY, ellipse.h, ellipse.v, ellipse.angle + this._angle, other);

            if (otherId > -1) {
                //debug('bounds').rect(tp.x + this.outerX1, tp.y + this.outerY1, tp.x + this.outerX1, tp.y + this.outerY2, 'rgb(255,255,255)');
                return [ ownId, otherId ];
            }
        }

        return null;
    },

    /**
     * returns effective occlusion of background area
     *
     * @param x
     * @param y
     * @param r
     * @return occlusion between 0 and 1
     */
    occludes: func(x, y, r) {

        if (this.occlusion == 0) {
            return 0;
        }

        var i = this.ellipse.length;
        var tp = this.owner;
        var ellipse, ex, ey, localOcclusion;
        var result = 0;

        this.update();

        while (i--) {

            ellipse = this.ellipse[i];
            ex = tp.x + ellipse.offsetX;
            ey = tp.y + ellipse.offsetY;

            if (x + r < ex || x > ex + ellipse.h) {
                continue;
            }

            if (y + r < ey || y > ey + ellipse.v) {
                continue;
            }

            //debug('bounds').text(20, 100, [ ellipse.occlusion, ellipse.h * ellipse.v, r * r ]);
            //debug('bounds').ellipse(ex, ey, ellipse.h, ellipse.v, 0, 8, 'rgb(255,255,255)');

            //!todo work in progress...

            localOcclusion = ellipse.occlusion * Math.sqrt((ellipse.h * ellipse.v) / (r * r)) /* * (r / 2 / distance(x, y, ex, ey)) */ ;

            result += localOcclusion * localOcclusion;
        }

        return Math.min(1, result);
    },

    /**
     * adds an ellipse
     *
     * @param finite ellipseH ellipse horizontal size
     * @param finite ellipseV ellipse vertical size, optional
     * @param finite ellipseAngle ellipse rotation angle
     * @param finite ellipseOffsetDistance offset distance from origin
     * @param finite ellipseOffsetAngle offset rotation angle
     * @param finite ellipseOcclusion occlusion factor for background objects
     */
    addEllipse: func(finite ellipseH, finite ellipseV = ellipseH, finite ellipseAngle = 0.0, finite ellipseOffsetDistance = 0.0, finite ellipseOffsetAngle = 0.0, finite ellipseOcclusion = 0.0) {

        this.ellipse.push( new Ellipse(ellipseH, ellipseV, ellipseAngle, ellipseOffsetDistance, ellipseOffsetAngle, ellipseOcclusion) );

        if (ellipseH != ellipseV || ellipseOffsetDistance != 0) {
            this.simple = false;
        }

        this._angle = NaN;

        return this.ellipse.length -1;
    },

    /**
     * updates a given ellipse
     * other than ellipseId, all parameters are optional and default to their current values
     *
     * @param ellipseId
     * @param ellipseH
     * @param ellipseV
     * @param ellipseAngle
     * @param ellipseOffsetDistance
     * @param ellipseOffsetAngle
    */
    protected updateEllipse: func(ellipseId, ellipseH, ellipseV, ellipseAngle, ellipseOffsetDistance, ellipseOffsetAngle, ellipseOcclusion) {

        assert(ellipseId < this.ellipse.length);

        var ellipse = this.ellipse[ellipseId];

        // update changed fields

        if (ellipseH != undefined) {
            ellipse.h = ellipseH;
        }
        if (ellipseV != undefined) {
            ellipse.v = ellipseV;
        }
        if (ellipseAngle != undefined) {
            ellipse.angle = ellipseAngle;
        }
        if (ellipseOffsetDistance != undefined) {
            ellipse.offsetDistance = ellipseOffsetDistance;
        }
        if (ellipseOffsetAngle != undefined) {
            ellipse.offsetAngle = ellipseOffsetAngle;
        }
        if (ellipseOcclusion != undefined) {
            ellipse.occlusion = ellipseOcclusion;
        }

        // invalidate cached values

        this._angle = NaN;
    },

    /**
     * updates internal offsets and outer bounds.
     * called before collisioncheck if current values are invalid.
     */
    public update: func() {

        // don't recalculate for minor changes

        if (isFinite(this._angle) && (this.simple || Math.abs(this._angle - this.owner.angle - this.angle) < 1.5)) {
            return;
        }

        this._angle = this.owner.angle + this.angle;

        // optimization: one circular bounding box

        if (this.simple) {

            var ellipse = this.ellipse[0];
            var eH = ellipse.h;

            this.outerX1 = -eH;
            this.outerY1 = -eH;
            this.outerX2 = eH;
            this.outerY2 = eH;
            this.occlusion = ellipse.occlusion;
            return;
        }

        // determine box surrounding all ellipses

        this.outerX1 = +Infinity;
        this.outerY1 = +Infinity;
        this.outerX2 = -Infinity;
        this.outerY2 = -Infinity;
        this.occlusion = 0;

        var i = this.ellipse.length;

        while (i--) {

            var ellipse = this.ellipse[i];
            ellipse.updateOffset(this._angle);
            this.updateBoundsFromEllipse(ellipse.h, ellipse.v, ellipse.angle, ellipse.offsetX, ellipse.offsetY);
            this.occlusion += ellipse.occlusion;
        }
    },

    /**
     * check if given ellipse intersects ellipses of other
     *
     * @param !todo
     * @return -1 for no intersection, otherwise ellipse-id
     */
    protected intersectOneAgainstAny: func(thisX, thisY, thisEH, thisEV, thisEA, other) {

        var otherX = other.owner.x;
        var otherY = other.owner.y;
        var otherEllipses = other.ellipse;

        var i = otherEllipses.length;
        var otherE, otherEX, otherEY;

        while (i--) {

            otherE = otherEllipses[i];
            otherEX = otherX + otherE.offsetX;
            otherEY = otherY + otherE.offsetY;

            if (ellipsesIntersect(thisX, thisY, thisEH, thisEV, thisEA, otherEX, otherEY, otherE.h, otherE.v, otherE.angle + other._angle, 8)) {
                return i;
            }
        }

        return -1;
    },

    /**
     * private: updates the outer boundary box for given ellipse
     *
     * @param eH ellipse horizontal length
     * @param eV ellipse vertical length
     * @param eOD ellipse offset distance
     * @param eOA ellipse offset angle (degrees)
     */
    protected updateBoundsFromEllipse: func(eH, eV, eA, eX, eY) {

        if (eH == eV) {

            this.outerX1 = Math.min(this.outerX1, eX - eH);
            this.outerY1 = Math.min(this.outerY1, eY - eH);
            this.outerX2 = Math.max(this.outerX2, eX + eH);
            this.outerY2 = Math.max(this.outerY2, eY + eH);

        } else {

            var rad = (eA + this._angle) * deg2rad;
            var sinRad = Math.sin(rad);
            var cosRad = Math.cos(rad);
            var sinRadEH = sinRad * eH;
            var cosRadEH = cosRad * eH;
            var sinRadEV = sinRad * eV;
            var cosRadEV = cosRad * eV;

            // get rotated points of rectangle containing unrotated ellipse
            // this could probably be optimized using the quadrant of eA, but the callfrequency is extremely low - low prio

            var x1 = -cosRadEH + sinRadEV;
            var y1 = -sinRadEH - cosRadEV;

            var x2 = cosRadEH + sinRadEV;
            var y2 = sinRadEH - cosRadEV;

            var x3 = cosRadEH - sinRadEV;
            var y3 = sinRadEH + cosRadEV;

            var x4 = -cosRadEH - sinRadEV;
            var y4 = -sinRadEH + cosRadEV;

            // get maxima and mirror them

            x2 = Math.max(x1, x2, x3, x4);
            y2 = Math.max(y1, y2, y3, y4);
            x1 = -x2;
            y1 = -y2;

            // update maxima for all ellipses contained in this bound

            this.outerX1 = Math.min(this.outerX1, eX + x1);
            this.outerY1 = Math.min(this.outerY1, eY + y1);
            this.outerX2 = Math.max(this.outerX2, eX + x2);
            this.outerY2 = Math.max(this.outerY2, eY + y2);
        }

    },

    /**
     * draws bounding rectangle and ellipses for debugging purposes
     */
    /*
    public debugDraw: func() {

        var tp = this.owner;
        var i = this.ellipse.length;
        var ellipse;

        debug.text(tp.x + this.outerX1, tp.y + this.outerY1, [ this.owner.faction ]);
        debug.rect(tp.x + this.outerX1, tp.y + this.outerY1, tp.x + this.outerX2, tp.y + this.outerY2);

        while (i--) {
            ellipse = this.ellipse[i];
            debug.ellipse(tp.x + ellipse.offsetX, tp.y + ellipse.offsetY, ellipse.h, ellipse.v, ellipse.angle + this._angle, 8);
        }
    },
    */

};
